eg.edu.alexu.csd.datastructure.linkedList.cs25_cs50
import java.lang.Math;
public class IPolynomialSolver {
    singlylinkedlist ac = new singlylinkedlist();
    singlylinkedlist ae = new singlylinkedlist();
    singlylinkedlist bc = new singlylinkedlist();
    singlylinkedlist be = new singlylinkedlist();
    singlylinkedlist cc = new singlylinkedlist();
    singlylinkedlist ce = new singlylinkedlist();
    singlylinkedlist rc = new singlylinkedlist();
    singlylinkedlist re = new singlylinkedlist();
    void setPolynomial(char poly, int[][] terms){
        if (poly== 'A' ){
            for (int i= 0 ; i<terms.length;i++){
                ac.add(terms[i][0]);
                ae.add(terms[i][1]);
            }
        }
        else if (poly== 'B' ){
            for (int i= 0 ; i<terms.length;i++){
                bc.add(terms[i][0]);
                be.add(terms[i][1]);
            }
        }
        else if (poly== 'C' ){
            for (int i= 0 ; i<terms.length;i++){
                cc.add(terms[i][0]);
                ce.add(terms[i][1]);
            }
        }
    }
    public void Sort(int terms[][]) {
        int n = terms.length;
        for (int i = n - 2; i >= 0; i--) {
            int C = terms[i][0];
            int E = terms[i][1];
            int j = i + 1;
            while (j < n && terms[j][1] > E) {
                terms[j - 1][0] = terms[j][0];
                terms[j - 1][1] = terms[j][1];
                j += 1;
            }
            terms[j - 1][0] = C;
            terms[j - 1][1] = E;
        }
    }
    String print(char poly) {
        String d = new String();
        if (poly == 'A') {
            LinkedList nc = ac.m;
            LinkedList ne = ae.m;
            if (nc.value == null)
                return null;
            while (nc != null) {

                if (nc.next == null) {
                    if ((int) ne.value == 1) {
                        d += Integer.toString((int) nc.value) + "x";

                    } else if ((int) ne.value == 0) {
                        d += Integer.toString((int) nc.value);
                    } else
                        d += Integer.toString((int) nc.value) + "x" + "^" + Integer.toString((int) ne.value);
                } else if ((int) ne.value == 1) {
                    d += Integer.toString((int) nc.value) + "x" + "+";

                } else if ((int) ne.value == 0) {
                    d += Integer.toString((int) nc.value) + "+";
                } else
                    d += Integer.toString((int) nc.value) + "x" + "^" + Integer.toString((int) ne.value) + "+";
                nc = nc.next;
                ne = ne.next;
            }
            return d;
        } else if (poly == 'B') {
            LinkedList nc = bc.m;
            LinkedList ne = be.m;
            if (nc.value == null)
                return null;
            while (nc != null) {
                if (nc.next == null) {
                    if ((int) ne.value == 1) {
                        d += Integer.toString((int) nc.value) + "x";

                    } else if ((int) ne.value == 0) {
                        d += Integer.toString((int) nc.value);
                    } else
                        d += Integer.toString((int) nc.value) + "x" + "^" + Integer.toString((int) ne.value);
                } else if ((int) ne.value == 1) {
                    d += Integer.toString((int) nc.value) + "x" + "+";

                } else if ((int) ne.value == 0) {
                    d += Integer.toString((int) nc.value) + "+";
                } else
                    d += Integer.toString((int) nc.value) + "x" + "^" + Integer.toString((int) ne.value) + "+";
                nc = nc.next;
                ne = ne.next;
            }
            return d;
        } else if (poly == 'C') {
            LinkedList nc = cc.m;
            LinkedList ne = ce.m;
            if (nc.value == null)
                return null;
            while (nc != null) {
                if (nc.next == null) {
                    if ((int) ne.value == 1) {
                        d += Integer.toString((int) nc.value) + "x";

                    } else if ((int) ne.value == 0) {
                        d += Integer.toString((int) nc.value);
                    } else
                        d += Integer.toString((int) nc.value) + "x" + "^" + Integer.toString((int) ne.value);
                } else if ((int) ne.value == 1) {
                    d += Integer.toString((int) nc.value) + "x" + "+";

                } else if ((int) ne.value == 0) {
                    d += Integer.toString((int) nc.value) + "+";
                } else
                    d += Integer.toString((int) nc.value) + "x" + "^" + Integer.toString((int) ne.value) + "+";
                ne = ne.next;
                nc = nc.next;
            }
            return d;
        } else {
            return null;
        }
    }
    void clearPolynomial(char poly){
        if (poly=='A'){
            ac.clear();
            ae.clear();
        }
        else if (poly=='B'){
            bc.clear();
            be.clear();
        }
        else if (poly=='C'){
            cc.clear();
            ce.clear();
        }
    }
    float evaluatePolynomial(char poly, float value){
        float sum = 0 ;
        if (poly=='A') {
            LinkedList nc = ac.m;
            LinkedList ne = ae.m;
            while (nc != null) {
                int n_c = (int) nc.value;
                int n_e = (int) ne.value;
                sum += n_c * Math.pow(value, n_e);
                nc = nc.next;
                ne = ne.next;
            }
        }
        else if (poly=='B') {
                LinkedList nc = bc.m;
                LinkedList ne = be.m;
                while (nc != null) {
                    int n_c = (int) nc.value;
                    int n_e = (int) ne.value;
                    sum += n_c * Math.pow(value, n_e);
                    nc = nc.next;
                    ne = ne.next;
                }
        }
        else if (poly=='C') {
                LinkedList nc = cc.m;
                LinkedList ne = ce.m;
                while (nc != null) {
                    int n_c = (int) nc.value;
                    int n_e = (int) ne.value;
                    sum += n_c * Math.pow(value, n_e);
                    nc = nc.next;
                    ne = ne.next;
                }
        }
        return sum ;
    }
    int[][] add(char poly1, char poly2) {
        if (poly1 == 'A' && poly2 == 'B') {
            LinkedList nc1 = ac.m;
            LinkedList ne1 = ae.m;
            LinkedList nc2 = bc.m;
            LinkedList ne2 = be.m;
            while (nc1 != null && nc2 != null) {
                if ((int) ne2.value == (int) ne1.value) {
                    re.add(ne2.value);
                    rc.add((int) nc2.value + (int) nc1.value);
                    nc1 = nc1.next;
                    nc2 = nc2.next;
                    ne1 = ne1.next;
                    ne2 = ne2.next;
                } else if ((int) ne1.value > (int) ne2.value) {
                    re.add(ne1.value);
                    rc.add(nc1.value);
                    nc1 = nc1.next;
                    ne1 = ne1.next;
                } else if ((int) ne2.value > (int) ne1.value) {
                    re.add(ne2.value);
                    rc.add(nc2.value);
                    nc2 = nc2.next;
                    ne2 = ne2.next;
                }

            }
            if (nc1 == null && nc2 != null) {
                re.add(ne2.value);
                rc.add(nc2.value);
                nc2 = nc2.next;
                ne2 = ne2.next;
            }
            if (nc2 == null && nc1 != null) {
                re.add(ne1.value);
                rc.add(nc1.value);
                nc1 = nc1.next;
                ne1 = ne1.next;
            }

        }
        if (poly1 == 'A' && poly2 == 'C') {
            LinkedList nc1 = ac.m;
            LinkedList ne1 = ae.m;
            LinkedList nc2 = cc.m;
            LinkedList ne2 = ce.m;
            while (nc1 != null && nc2 != null) {
                if ((int) ne2.value == (int) ne1.value) {
                    re.add(ne2.value);
                    rc.add((int) nc2.value + (int) nc1.value);
                    nc1 = nc1.next;
                    nc2 = nc2.next;
                    ne1 = ne1.next;
                    ne2 = ne2.next;
                } else if ((int) ne1.value > (int) ne2.value) {
                    re.add(ne1.value);
                    rc.add(nc1.value);
                    nc1 = nc1.next;
                    ne1 = ne1.next;
                } else if ((int) ne2.value > (int) ne1.value) {
                    re.add(ne2.value);
                    rc.add(nc2.value);
                    nc2 = nc2.next;
                    ne2 = ne2.next;
                }

            }
            if (nc1 == null && nc2 != null) {
                re.add(ne2.value);
                rc.add(nc2.value);
                nc2 = nc2.next;
                ne2 = nc2.next;
            }
            if (nc2 == null && nc1 != null) {
                re.add(ne1.value);
                rc.add(nc1.value);
                nc1 = nc1.next;
                ne1 = ne1.next;
            }

        }
        if (poly1 == 'B' && poly2 == 'C') {
            LinkedList nc1 = bc.m;
            LinkedList ne1 = be.m;
            LinkedList nc2 = cc.m;
            LinkedList ne2 = ce.m;
            while (nc1 != null && nc2 != null) {
                if ((int) ne2.value == (int) ne1.value) {
                    re.add(ne2.value);
                    rc.add((int) nc2.value + (int) nc1.value);
                    nc1 = nc1.next;
                    nc2 = nc2.next;
                    ne1 = ne1.next;
                    ne2 = ne2.next;
                } else if ((int) ne1.value > (int) ne2.value) {
                    re.add(ne1.value);
                    rc.add(nc1.value);
                    nc1 = nc1.next;
                    ne1 = ne1.next;
                } else if ((int) ne2.value > (int) ne1.value) {
                    re.add(ne2.value);
                    rc.add(nc2.value);
                    nc2 = nc2.next;
                    ne2 = ne2.next;
                }

            }
            if (nc1 == null && nc2 != null) {
                re.add(ne2.value);
                rc.add(nc2.value);
                nc2 = nc2.next;
                ne2 = ne2.next;
            }
            if (nc2 == null && nc1 != null) {
                re.add(ne1.value);
                rc.add(nc1.value);
                nc1 = nc1.next;
                ne1 = ne1.next;
            }

        }
        if (poly1 == 'A' && poly2 == 'A') {
            LinkedList nc1 = ac.m;
            LinkedList ne1 = ae.m;
            LinkedList nc2 = ac.m;
            LinkedList ne2 = ae.m;
            while (nc1 != null && nc2 != null) {
                if ((int) ne2.value == (int) ne1.value) {
                    re.add(ne2.value);
                    rc.add((int) nc2.value + (int) nc1.value);
                    nc1 = nc1.next;
                    nc2 = nc2.next;
                    ne1 = ne1.next;
                    ne2 = ne2.next;
                }
            }

        }
        if (poly1 == 'B' && poly2 == 'B') {
            LinkedList nc1 = bc.m;
            LinkedList ne1 = be.m;
            LinkedList nc2 = bc.m;
            LinkedList ne2 = be.m;
            while (nc1 != null && nc2 != null) {
                if ((int) ne2.value == (int) ne1.value) {
                    re.add(ne2.value);
                    rc.add((int) nc2.value + (int) nc1.value);
                    nc1 = nc1.next;
                    nc2 = nc2.next;
                    ne1 = ne1.next;
                    ne2 = ne2.next;
                }

            }

        }
        if (poly1 == 'C' && poly2 == 'C') {
            LinkedList nc1 = cc.m;
            LinkedList ne1 = ce.m;
            LinkedList nc2 = cc.m;
            LinkedList ne2 = ce.m;
            while (nc1 != null && nc2 != null) {
                if ((int) ne2.value == (int) ne1.value) {
                    re.add(ne2.value);
                    rc.add((int) nc2.value + (int) nc1.value);
                    nc1 = nc1.next;
                    nc2 = nc2.next;
                    ne1 = ne1.next;
                    ne2 = ne2.next;
                }
            }

        }
        int[][] add = new int[rc.size()][2];
        LinkedList ncR = rc.m;
        LinkedList neR= re.m;
        int c=0;
        while(ncR != null) {
            add[c][0]=(int)ncR.value;
            add[c][1]=(int)neR.value;
            ncR=ncR.next;
            neR=neR.next;
            c++;
        }
        return add;
    }
    int[][] subtract(char poly1, char poly2) {
        if (poly1 == 'A' && poly2 == 'B') {
            LinkedList nc1 = ac.m;
            LinkedList ne1 = ae.m;
            LinkedList nc2 = bc.m;
            LinkedList ne2 = be.m;
            while (nc1 != null && nc2 != null) {
                if ((int) ne2.value == (int) ne1.value) {
                    re.add(ne2.value);
                    rc.add((int) nc1.value - (int) nc2.value);
                    nc1 = nc1.next;
                    nc2 = nc2.next;
                    ne1 = ne1.next;
                    ne2 = ne2.next;
                } else if ((int) ne1.value > (int) ne2.value) {
                    re.add(ne1.value);
                    rc.add(nc1.value);
                    nc1 = nc1.next;
                    ne1 = ne1.next;
                } else if ((int) ne2.value > (int) ne1.value) {
                    re.add(ne2.value);
                    rc.add(-1 * (int) nc2.value);
                    nc2 = nc2.next;
                    ne2 = ne2.next;
                }

            }
            if (nc1 == null && nc2 != null) {
                re.add(ne2.value);
                rc.add(-1 * (int) nc2.value);
                nc2 = nc2.next;
                ne2 = ne2.next;
            }
            if (nc2 == null && nc1 != null) {
                re.add(ne1.value);
                rc.add(nc1.value);
                nc1 = nc1.next;
                ne1 = ne1.next;
            }

        }
        if (poly1 == 'B' && poly2 == 'A') {
            LinkedList nc2 = ac.m;
            LinkedList ne2 = ae.m;
            LinkedList nc1 = bc.m;
            LinkedList ne1 = be.m;
            while (nc1 != null && nc2 != null) {
                if ((int) ne2.value == (int) ne1.value) {
                    re.add(ne2.value);
                    rc.add((int) nc1.value - (int) nc2.value);
                    nc1 = nc1.next;
                    nc2 = nc2.next;
                    ne1 = ne1.next;
                    ne2 = ne2.next;
                } else if ((int) ne1.value > (int) ne2.value) {
                    re.add(ne1.value);
                    rc.add(nc1.value);
                    nc1 = nc1.next;
                    ne1 = ne1.next;
                } else if ((int) ne2.value > (int) ne1.value) {
                    re.add(ne2.value);
                    rc.add(-1 * (int) nc2.value);
                    nc2 = nc2.next;
                    ne2 = ne2.next;
                }

            }
            if (nc1 == null && nc2 != null) {
                re.add(ne2.value);
                rc.add(-1 * (int) nc2.value);
                nc2 = nc2.next;
                ne2 = ne2.next;
            }
            if (nc2 == null && nc1 != null) {
                re.add(ne1.value);
                rc.add(nc1.value);
                nc1 = nc1.next;
                ne1 = ne1.next;
            }

        }
        if (poly1 == 'A' && poly2 == 'C') {
            LinkedList nc1 = ac.m;
            LinkedList ne1 = ae.m;
            LinkedList nc2 = cc.m;
            LinkedList ne2 = ce.m;
            while (nc1 != null && nc2 != null) {
                if ((int) ne2.value == (int) ne1.value) {
                    re.add(ne2.value);
                    rc.add((int) nc1.value - (int) nc2.value);
                    nc1 = nc1.next;
                    nc2 = nc2.next;
                    ne1 = ne1.next;
                    ne2 = ne2.next;
                } else if ((int) ne1.value > (int) ne2.value) {
                    re.add(ne1.value);
                    rc.add(nc1.value);
                    nc1 = nc1.next;
                    ne1 = ne1.next;
                } else if ((int) ne2.value > (int) ne1.value) {
                    re.add(ne2.value);
                    rc.add(-1 * (int) nc2.value);
                    nc2 = nc2.next;
                    ne2 = ne2.next;
                }

            }
            if (nc1 == null && nc2 != null) {
                re.add(ne2.value);
                rc.add(-1 * (int) nc2.value);
                nc2 = nc2.next;
                ne2 = ne2.next;
            }
            if (nc2 == null && nc1 != null) {
                re.add(ne1.value);
                rc.add(nc1.value);
                nc1 = nc1.next;
                ne1 = ne1.next;
            }

        }
        if (poly1 == 'C' && poly2 == 'A') {
            LinkedList nc1 = cc.m;
            LinkedList ne1 = ce.m;
            LinkedList nc2 = ac.m;
            LinkedList ne2 = ae.m;
            while (nc1 != null && nc2 != null) {
                if ((int) ne2.value == (int) ne1.value) {
                    re.add(ne2.value);
                    rc.add((int) nc1.value - (int) nc2.value);
                    nc1 = nc1.next;
                    nc2 = nc2.next;
                    ne1 = ne1.next;
                    ne2 = ne2.next;
                } else if ((int) ne1.value > (int) ne2.value) {
                    re.add(ne1.value);
                    rc.add(nc1.value);
                    nc1 = nc1.next;
                    ne1 = ne1.next;
                } else if ((int) ne2.value > (int) ne1.value) {
                    re.add(ne2.value);
                    rc.add(-1 * (int) nc2.value);
                    nc2 = nc2.next;
                    ne2 = ne2.next;
                }

            }
            if (nc1 == null && nc2 != null) {
                re.add(ne2.value);
                rc.add(-1 * (int) nc2.value);
                nc2 = nc2.next;
                ne2 = ne2.next;
            }
            if (nc2 == null && nc1 != null) {
                re.add(ne1.value);
                rc.add(nc1.value);
                nc1 = nc1.next;
                ne1 = ne1.next;
            }

        }
        if (poly1 == 'B' && poly2 == 'C') {
            LinkedList nc1 = bc.m;
            LinkedList ne1 = be.m;
            LinkedList nc2 = cc.m;
            LinkedList ne2 = ce.m;
            while (nc1 != null && nc2 != null) {
                if ((int) ne2.value == (int) ne1.value) {
                    re.add(ne2.value);
                    rc.add((int) nc1.value - (int) nc2.value);
                    nc1 = nc1.next;
                    nc2 = nc2.next;
                    ne1 = ne1.next;
                    ne2 = ne2.next;
                } else if ((int) ne1.value > (int) ne2.value) {
                    re.add(ne1.value);
                    rc.add(nc1.value);
                    nc1 = nc1.next;
                    ne1 = ne1.next;
                } else if ((int) ne2.value > (int) ne1.value) {
                    re.add(ne2.value);
                    rc.add(-1 * (int) nc2.value);
                    nc2 = nc2.next;
                    ne2 = ne2.next;
                }

            }
            if (nc1 == null && nc2 != null) {
                re.add(ne2.value);
                rc.add(-1 * (int) nc2.value);
                nc2 = nc2.next;
                ne2 = ne2.next;
            }
            if (nc2 == null && nc1 != null) {
                re.add(ne1.value);
                rc.add(nc1.value);
                nc1 = nc1.next;
                ne1 = ne1.next;
            }

        }
        if (poly1 == 'C' && poly2 == 'B') {
            LinkedList nc1 = cc.m;
            LinkedList ne1 = ce.m;
            LinkedList nc2 = bc.m;
            LinkedList ne2 = be.m;
            while (nc1 != null && nc2 != null) {
                if ((int) ne2.value == (int) ne1.value) {
                    re.add(ne2.value);
                    rc.add((int) nc1.value - (int) nc2.value);
                    nc1 = nc1.next;
                    nc2 = nc2.next;
                    ne1 = ne1.next;
                    ne2 = ne2.next;
                } else if ((int) ne1.value > (int) ne2.value) {
                    re.add(ne1.value);
                    rc.add(nc1.value);
                    nc1 = nc1.next;
                    ne1 = ne1.next;
                } else if ((int) ne2.value > (int) ne1.value) {
                    re.add(ne2.value);
                    rc.add(-1 * (int) nc2.value);
                    nc2 = nc2.next;
                    ne2 = ne2.next;
                }

            }
            if (nc1 == null && nc2 != null) {
                re.add(ne2.value);
                rc.add(-1 * (int) nc2.value);
                nc2 = nc2.next;
                ne2 = ne2.next;
            }
            if (nc2 == null && nc1 != null) {
                re.add(ne1.value);
                rc.add(nc1.value);
                nc1 = nc1.next;
                ne1 = ne1.next;
            }

        }
        if ((poly1 == 'A' && poly2 == 'A') || (poly1 == 'B' && poly2 == 'B') || (poly1 == 'C' && poly2 == 'C')) {
            int[][] sub1 = new int[1][1];
            sub1[0][0] = 0;
            return sub1;
        }
        int[][] sub = new int[rc.size()][2];
        LinkedList ncR = rc.m;
        LinkedList neR = re.m;
        int c = 0;
        while (ncR != null) {
            sub[c][0] = (int) ncR.value;
            sub[c][1] = (int) neR.value;
            ncR = ncR.next;
            neR = neR.next;
            c++;
        }
        return sub;
    }
    int[][] multiply(char poly1, char poly2) {
        if (poly1 == 'A' && poly2 == 'B') {
            LinkedList nc1 = ac.m;
            LinkedList ne1 = ae.m;

            while (nc1 != null) {
                LinkedList nc2 = bc.m;
                LinkedList ne2 = be.m;
                while (nc2 != null) {
                    re.add((int) ne1.value + (int) ne2.value);
                    rc.add((int) nc1.value * (int) nc2.value);
                    ne2 = ne2.next;
                    nc2 = nc2.next;
                }
                nc1 = nc1.next;
                ne1 = ne1.next;
            }
        }
        if (poly1 == 'B' && poly2 == 'C') {
            LinkedList nc1 = bc.m;
            LinkedList ne1 = be.m;

            while (nc1 != null) {
                LinkedList nc2 = cc.m;
                LinkedList ne2 = ce.m;
                while (nc2 != null) {
                    re.add((int) ne1.value + (int) ne2.value);
                    rc.add((int) nc1.value * (int) nc2.value);
                    ne2 = ne2.next;
                    nc2 = nc2.next;
                }
                nc1 = nc1.next;
                ne1 = ne1.next;
            }
        }
        if (poly1 == 'A' && poly2 == 'C') {
            LinkedList nc1 = ac.m;
            LinkedList ne1 = ae.m;

            while (nc1 != null) {
                LinkedList nc2 = cc.m;
                LinkedList ne2 = ce.m;
                while (nc2 != null) {
                    re.add((int) ne1.value + (int) ne2.value);
                    rc.add((int) nc1.value * (int) nc2.value);
                    ne2 = ne2.next;
                    nc2 = nc2.next;
                }
                nc1 = nc1.next;
                ne1 = ne1.next;
            }
        }
        if (poly1 == 'A' && poly2 == 'A') {
            LinkedList nc1 = ac.m;
            LinkedList ne1 = ae.m;

            while (nc1 != null) {
                LinkedList nc2 = ac.m;
                LinkedList ne2 = ae.m;
                while (nc2 != null) {
                    re.add((int) ne1.value + (int) ne2.value);
                    rc.add((int) nc1.value * (int) nc2.value);
                    ne2 = ne2.next;
                    nc2 = nc2.next;
                }
                nc1 = nc1.next;
                ne1 = ne1.next;
            }
        }
        if (poly1 == 'B' && poly2 == 'B') {
            LinkedList nc1 = bc.m;
            LinkedList ne1 = be.m;

            while (nc1 != null) {
                LinkedList nc2 = bc.m;
                LinkedList ne2 = be.m;
                while (nc2 != null) {
                    re.add((int) ne1.value + (int) ne2.value);
                    rc.add((int) nc1.value * (int) nc2.value);
                    ne2 = ne2.next;
                    nc2 = nc2.next;
                }
                nc1 = nc1.next;
                ne1 = ne1.next;
            }
        }
        if (poly1 == 'C' && poly2 == 'C') {
            LinkedList nc1 = cc.m;
            LinkedList ne1 = ce.m;

            while (nc1 != null) {
                LinkedList nc2 = cc.m;
                LinkedList ne2 = ce.m;
                while (nc2 != null) {
                    re.add((int) ne1.value + (int) ne2.value);
                    rc.add((int) nc1.value * (int) nc2.value);
                    ne2 = ne2.next;
                    nc2 = nc2.next;
                }
                nc1 = nc1.next;
                ne1 = ne1.next;
            }
        }
        int[][] multiply = new int[rc.size()][2];
        LinkedList ncR = rc.m;
        LinkedList neR = re.m;
        int c = 0;
        while (ncR != null) {
            multiply[c][0] = (int) ncR.value;
            multiply[c][1] = (int) neR.value;
            ncR = ncR.next;
            neR = neR.next;
            c++;
        }
        Sort(multiply);
        int[][] m = new int[multiply.length][2];
        for (int i = 0; i < multiply.length; i++) {
            m[i][0] = multiply[i][0];
            m[i][1] = multiply[i][1];
            for (int j = i + 1; j < multiply.length; j++) {
                if (multiply[i][1] == multiply[j][1]) {
                    m[i][0] = multiply[i][0] + multiply[j][0];
                    i = j;
                }
            }
        }
        int v = 0;
        for (int k = 0; k < m.length; k++) {
            if (m[k][0] != 0) {
                v++;
            }
        }
        int[][] m1 = new int[v][2];
        int v1 = 0;
        for (int i = 0; i < m.length; i++) {
            if (m[i][0] != 0) {
                m1[v1][0] = m[i][0];
                m1[v1++][1] = m[i][1];
            }
        }
        return m1;
    }
    }
